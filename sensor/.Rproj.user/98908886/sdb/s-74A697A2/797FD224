{
    "contents" : "\n# Load data ---------------------------------------------------------------\n\nlocations = read.table('data/mote-location-data.txt',header = TRUE)\nhead(locations)\n\nvalues = read.csv('data/sonoma-data-net.csv')\nhead(values)\n\n\n# Location: distribution check --------------------------------------------\n\nhead(locations)\n\n## # ID\nrange(locations$ID)\n\n## # Height\nhist(locations$Height,\n     main = \"Height of sensors along the trees\",\n     xlab = \"Height (m)\")\n\n## # Direction\nunique(locations$Direc)\n\n## # Distance\nhist(locations$Dist[locations$Dist<=1], ##OUTLIERS##\n     main = \"Distance from trunk\",\n     xlab = \"Distance (m)\",\n     xlim=c(0,1))\n\nsum(locations$Dist>1)\n\n## # Tree\nunique(locations$Tree)\n\n\n# Location: missing values ------------------------------------------------\n\nall(is.na(locations))\n\n\n# Values: distribution check ----------------------------------------------\n\nhead(values)\n\n## # Epoch\nhist(values$epoch,\n     main = \"Id of each measurement time\",\n     xlab = \"Id\",\n     xlim = c(2000,12000))\n\n## # Time\nunix_time = as.numeric(as.POSIXct(values$result_time))\ntime_seconds = unix_time - min(unix_time)\ntime_days = time_seconds/(3600*24)\nhist(time_days,\n     main = \"Distribution of measurement times\",\n     xlab = \"Time (day)\",\n     xlim = c(0,30))\n\n## # Nodes ID\nhist(values$nodeid,\n     breaks = length(values$nodeid),\n     main = \"Number of measurements of nodes\",\n     xlab = \"Node ID\")\n# Number of nodes \nlength(unique(values$nodeid))\n# Number of parent nodes\nlength(unique(values$parent))\n# Id of parents/children nodes\nsort(unique(values$parent)) ##OUTLIERS## outlier: 65535\nsort(unique(values$nodeid))\n\n## # Voltage\npar(mfrow=c(1,2))\nhist(values$voltage,\n     main = \"Nodes voltage\",\n     xlab = \"voltage\")\nhist(values$voltage[values$voltage<300],\n     main = \"Nodes voltage\\nwithout outliers\",\n     xlab = \"voltage\")\npar(mfrow=c(1,1))\nsummary(values$voltage)\nsum(values$voltage<250,na.rm = TRUE)/length(values$voltage)\n# Proportion of outliers\nsum(values$voltage>300,na.rm = TRUE)/length(values$voltage)  ##OUTLIERS##\n\n## # Depth\nsummary(values$depth)\npar(mfrow=c(1,2))\nboxplot(values$depth,\n        main = \"Node depth in network\",  ##OUTLIERS## 255\n        ylab = \"Depth\")\nboxplot(values$depth[values$depth<250],\n        main = \"Node depth in network\\nwithout 255 outlier\",\n        ylab = \"Depth\")\npar(mfrow=c(1,1))\n\n## # Humidity\nhist(values$humidity,              ##OUTLIERS##\n     main = \"Humidity measures\",\n     xlab = \"Humidity (RH%)\")\nrange(values$humidity,na.rm = TRUE)\n# Number of outliers\nsum(values$humidity>100,na.rm = TRUE)/length(values$humidity)\nsum(values$humidity<0,na.rm = TRUE)/length(values$humidity)\n\n## # Adjusted humidity\nhist(values$humid_adj, ##OUTLIERS##\n     main = \"Adjusted humidity measures\",\n     xlab = \"Humidity (RH%)\")\nhist(values$humid_adj[values$humid_adj>=0 & values$humid_adj<=100], ##OUTLIERS##\n     main = \"Adjusted humidity measures\",\n     xlab = \"Humidity (RH%)\")\n# Number of outliers\nsum(values$humid_adj>120,na.rm = TRUE)/length(values$humid_adj)\n(sum(values$humid_adj<0,na.rm = TRUE)+sum(values$humid_adj<120 & values$humid_adj>100,na.rm = TRUE))/length(values$humid_adj)\nrange(values$humid_adj,na.rm = TRUE)\n\n## # Temperture\nhist(values$humid_temp, ##OUTLIERS##\n     main = \"Temperature measures\",\n     xlab = \"Temperature (°C)\")\nhist(values$humid_temp[values$humid_temp<=40], ##OUTLIERS##\n     main = \"Temperature measures\",\n     xlab = \"Temperature (°C)\")\nrange(values$humid_temp,na.rm = TRUE)\n# Number of outliers\nsum(values$humid_temp>50,na.rm = TRUE)\nsum(values$humid_temp>40,na.rm = TRUE)/length(values$humid_temp)\n\n\n## # Incident PAR\nhist(values$hamatop,\n     main = \"Incident PAR values\",\n     xlab = \"PAR\")\n\n## # Reflected PAR\nhist(values$hamatop,\n     main = \"Reflected PAR values\",\n     xlab = \"PAR\")\n\n\n# Values: missing values --------------------------------------------------\n\n## # Check which columns contain N/As\nwhich(apply(is.na(values),2,any))\n\n## # Proportion of N/As\nprop_na = function(column){\n  # Compute the proportion of missing values\n  sum(is.na(column))/length(column)\n}\napply(values[,7:11],2,prop_na)\n\n## # Check that the N/As appear at the same rows\nbool = TRUE\nfor (i in 7:11){\n  for (j in 7:11){\n    bool  = bool & all(which(is.na(values[,i]))==which(is.na(values[,j])))\n  }\n}\nbool\n\n## # Get rows with N/As\nnas = which(is.na(values[,11]))\n\n\n\n\n",
    "created" : 1457307050289.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "447900317",
    "id" : "797FD224",
    "lastKnownWriteTime" : 1457418864,
    "path" : "~/Documents/doutib-work/sensor/Data_Check.R",
    "project_path" : "Data_Check.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}